{"version":3,"file":"static/js/112.902abd06.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/selectors.js","components/phonebook/PhonebookForm.jsx","components/phonebook/PhonebookList.jsx","components/phonebook/PhonebookFilter.jsx","components/phonebook/PhoneBook.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","export const getAllContacts = state => state.contacts.contacts;\nexport const getFilter = state => state.filter.filter;\nexport const getState = ({contacts}) => ({loading: contacts.loading, error: contacts.error});\n\nexport const getFilteredPeople = (contacts,filter) => {\n        \n    if (!filter) {\n        return contacts\n    };\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const filteredPeople = contacts.filter(({ name, number }) => {\n        const normalizedName = name.toLocaleLowerCase();\n        const normalizedNumber = number.toLocaleLowerCase();\n        const result = normalizedName.includes(normalizedFilter) || normalizedNumber.includes(normalizedFilter);\n        return result;\n    })\n    return filteredPeople;\n  };","import { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addContact } from \"redux/operations\";\nimport { nanoid } from \"nanoid\";\nimport { FormTotal } from './PhonebookStyled'\nimport { getAllContacts } from \"redux/selectors\";\nimport Toastify from 'toastify-js';\nimport '../../styled/toastify.css';\nimport { InputButton, InputField } from \"styled/CommonStyled\";\n\n\nexport default function PhonebookForm() {\n    const dispatch = useDispatch();\n    const contactList = useSelector(getAllContacts);\n    const [name, setName] = useState('')\n    const [number, setNumber] = useState('')\n    \n    const handleInput = (e) => {\n        switch (e.target.name) {\n            case 'name':\n                setName(e.target.value);\n                break;\n            case 'number':\n                setNumber(e.target.value)\n                break;\n            default:\n                return\n        }\n    }\n   \n    const isDuplicate = (name, number) => {\n        const result = contactList.find(contact => contact.name === name && contact.number === number);\n        return result;\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const newContact = {\n            id: nanoid(),\n            name: name,\n            number:number\n        }\n\n        if (isDuplicate(name, number)) {\n            return Toastify({\n                text: `There are ${name} in phonebook`,\n                gravity: \"bottom\",\n                position: 'center',\n                stopOnFocus: true,\n            }).showToast();\n        }\n\n        dispatch(addContact(newContact))\n        setName('');\n        setNumber('');\n    }\n\nreturn (\n    <FormTotal onSubmit={handleSubmit}>\n        <label htmlFor=\"id-name\"> Name:</label>\n        <InputField\n            id=\"id-name\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleInput}\n                />\n               \n        <label htmlFor=\"id-number\"> Phone: </label>\n        <InputField\n            id=\"id-number\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleInput}\n        />\n            \n        <InputButton >Add people</InputButton>\n        </FormTotal>\n     )\n}\n","// import { useDispatch } from 'react-redux';\n// import { deleteContacts } from 'redux/contactsSlice';\nimport { ListItem, Row } from './PhonebookStyled'\nimport {  removeContact } from 'redux/operations';\nimport { fetchContacts } from \"redux/operations\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getFilteredPeople, getFilter, getAllContacts } from 'redux/selectors';\nimport { useEffect } from \"react\";\nimport { Message, Button } from '../../styled/CommonStyled';\n\nexport default function PhonebookList() {\n\n    const stateFilter = useSelector(getFilter);\n    const contactsList = useSelector(getAllContacts);\n    const dispatch = useDispatch();\n\n    useEffect(() => { dispatch(fetchContacts()) }, [dispatch]);\n\n    const people = getFilteredPeople(contactsList, stateFilter);\n\n    const list = people.map(({ id, name, number }) => {\n        return <ListItem key={id}>\n            <Row>Name: {name}</Row>\n            <Row>Phone: {number}</Row>\n            <span><Button onClick={() => dispatch(removeContact(id))}> Remove</Button></span>\n        </ListItem>;   \n    })\n\n    return (\n        <>\n         <ul>{list}</ul>\n        {people.length === 0 && stateFilter && <Message>No any people for your query</Message>}\n        </>\n       \n    )\n}","import { InputField } from '../../styled/CommonStyled';\nimport {setFilter} from '../../redux/filterSlice'\nimport { useDispatch } from 'react-redux';\n\nexport default function PhonebookFilter() {\n    const dispatch = useDispatch()\n    const handleInput = (e) => {\n        e.preventDefault();\n        dispatch(setFilter(e.target.value))\n        console.log(e.target.value)\n    }\n    return (\n        <InputField\n          type='text'\n          name='filter'\n          onChange={handleInput}\n        placeholder={\"filter\"} />\n    )\n}","import  PhonebookForm  from \"./PhonebookForm\";\nimport PhonebookList from \"./PhonebookList\";\nimport PhonebookFilter from \"./PhonebookFilter\";\nimport { Block } from './PhonebookStyled'\nimport { useSelector } from \"react-redux\";\nimport { getState } from 'redux/selectors';\nimport { Message } from '../../styled/CommonStyled';\n\nexport default function Phonebook() {\n \n  const { loading, error } = useSelector(getState);\n  console.log(error)\n\n   return (\n      <Block>\n        <h1>Phonebook</h1>\n        <PhonebookForm />\n        <h2>Contacts</h2>\n       <PhonebookFilter />\n       {loading && <Message> Loading...</Message>}\n         <PhonebookList/>\n       {error && <Message>No any people for your query</Message>}\n       \n      </Block>\n    )\n}"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","getAllContacts","state","contacts","getFilter","filter","getState","loading","error","PhonebookForm","dispatch","useDispatch","contactList","useSelector","useState","name","setName","number","setNumber","handleInput","e","target","value","onSubmit","preventDefault","newContact","find","contact","isDuplicate","Toastify","text","gravity","position","stopOnFocus","showToast","addContact","htmlFor","type","pattern","title","required","onChange","PhonebookList","stateFilter","contactsList","useEffect","fetchContacts","people","normalizedFilter","toLocaleLowerCase","normalizedName","normalizedNumber","includes","getFilteredPeople","list","map","onClick","removeContact","length","PhonebookFilter","setFilter","console","log","placeholder","Phonebook"],"sourceRoot":""}